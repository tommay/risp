;; Macro (partial (func ...)) for partial function application.  E.g.,
;; (partial (+ 1)) returns a function that adds one to its (zero or
;; more) arguments.
;;
;; This is more efficient with functions that take a fixed number of
;; arguments.
;;
;; I'm not sure that capture of the arguments to the partially applied
;; function is quite right.
;;
;; Partially applied functions can themselves be used with partial.

(load 'for)

(define-macro (partial func)
  (let* ((fn (eval (car func)))
	 (args (map eval (cdr func)))
	 (arity (arity fn)))
    (cond
     ((null? arity)
      (let ((gensyms (list (gensym))))
	`(lambda (&rest ,@gensyms) (apply ,fn (append ',args ,@gensyms)))))
     (t
      (let* ((remaining (- arity (length args)))
	     (gensyms
	      (map (lambda (_) (gensym)) (take remaining (repeat nil)))))
	`(lambda ,gensyms (,fn ,@args ,@gensyms)))))))

;; (for (_ :in (take remaining (repeat nil))) (gensym))

(define (x a b c) (+ a b c))
